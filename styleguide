===========
Style guide
===========

List comprehensions
-------------------

- should be prefered over for-loops

- contrarian advice: explicit is not always better than implicit. Specifically, in
  list comprehensions you don't want this:

    if any(order_product.status == status for order_product


    ...

- the python aversion towards map/reduce/filter is just silly. Consider this:

    map(str, integers)

  to:

    [str(i) for i in integers]

  Be pragmatic. For me, if a single argument from a flat lists gets passed to a function 
  I use map, otherwise listcomprehensions.





Unsorted
--------

Iteration
---------

2) abstract away iteration

3) use generators whenever you can

4) rebind long lookup chains before iteration (i.e. foo = baz.bar.foo)

5) rebind long boolean expressions:

    all_cancelled = all(foo.status == CANCELLED for foo in a_bunch_of_foos)
    if all_cancelled:
        do_stuff()

5) abstract away common patterns:
    - defaultdict(int) is almost always a itertools.Counter
    - defaultdict(list) is almost always a toolz.groupby


Functions
---------

1) more functions

2) should be short

3) should do one thing

4) should preferable always return something



Prefer a functional approach
----------------------------

1) more functions

2) less classes

3) minimize state or concentrate it a few places

4) use the highest order abstractions that you can find

5) use higher order functions extensively

6) prefer vanilla datastructures to classes

7) consider a functional library

8) a class with one method should be a function

9) a method that doesn't use self should probably be a normal function, unless you've got
   really good reasons to don't do it



Classes
-------

1) less classes

2) prefer vanilla datastructures to classes

3) inheritance is possibly the wrong this to do

4) multiple inheritance is almost always the wrong thing to do



Datastructures
--------------

1) prefer vanilla datastructures to classes

2) don't use XML


General
-------

1) always break out boilerplate



Names

1) rename for clarity

2) even alias for clarity



Kontrovers
----------

1) in list comprehensions, contrarian advice: use SHORT NON-DESCRITPTIVE names

2) I don't care what people says, correctly done LESS CODE is ALMOST ALWAYS BETTER





Smells
------

- buzzwords

- useless abstractions

- strawman

- cut n paste






- people will go through lots of pain and raise complexity at 100 places for a small benefit in one place...

- beware of line noise! (or the "explicit is better..." lie)
    if len(foos) > 0, etc.
